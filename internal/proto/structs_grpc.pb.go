// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AtlasServiceClient is the client API for AtlasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtlasServiceClient interface {
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	NodeStatus(ctx context.Context, in *NodeStatusRequest, opts ...grpc.CallOption) (*NodeStatusResponse, error)
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	GetProviderByName(ctx context.Context, in *GetProviderByNameRequest, opts ...grpc.CallOption) (*Provider, error)
}

type atlasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAtlasServiceClient(cc grpc.ClientConnInterface) AtlasServiceClient {
	return &atlasServiceClient{cc}
}

func (c *atlasServiceClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/proto.AtlasService/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, "/proto.AtlasService/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasServiceClient) NodeStatus(ctx context.Context, in *NodeStatusRequest, opts ...grpc.CallOption) (*NodeStatusResponse, error) {
	out := new(NodeStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.AtlasService/NodeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasServiceClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, "/proto.AtlasService/ListProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atlasServiceClient) GetProviderByName(ctx context.Context, in *GetProviderByNameRequest, opts ...grpc.CallOption) (*Provider, error) {
	out := new(Provider)
	err := c.cc.Invoke(ctx, "/proto.AtlasService/GetProviderByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtlasServiceServer is the server API for AtlasService service.
// All implementations must embed UnimplementedAtlasServiceServer
// for forward compatibility
type AtlasServiceServer interface {
	Deploy(context.Context, *DeployRequest) (*DeployResponse, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	NodeStatus(context.Context, *NodeStatusRequest) (*NodeStatusResponse, error)
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	GetProviderByName(context.Context, *GetProviderByNameRequest) (*Provider, error)
	mustEmbedUnimplementedAtlasServiceServer()
}

// UnimplementedAtlasServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAtlasServiceServer struct {
}

func (UnimplementedAtlasServiceServer) Deploy(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedAtlasServiceServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedAtlasServiceServer) NodeStatus(context.Context, *NodeStatusRequest) (*NodeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeStatus not implemented")
}
func (UnimplementedAtlasServiceServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedAtlasServiceServer) GetProviderByName(context.Context, *GetProviderByNameRequest) (*Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderByName not implemented")
}
func (UnimplementedAtlasServiceServer) mustEmbedUnimplementedAtlasServiceServer() {}

// UnsafeAtlasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtlasServiceServer will
// result in compilation errors.
type UnsafeAtlasServiceServer interface {
	mustEmbedUnimplementedAtlasServiceServer()
}

func RegisterAtlasServiceServer(s grpc.ServiceRegistrar, srv AtlasServiceServer) {
	s.RegisterService(&AtlasService_ServiceDesc, srv)
}

func _AtlasService_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServiceServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AtlasService/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServiceServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtlasService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AtlasService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtlasService_NodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServiceServer).NodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AtlasService/NodeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServiceServer).NodeStatus(ctx, req.(*NodeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtlasService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AtlasService/ListProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServiceServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtlasService_GetProviderByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtlasServiceServer).GetProviderByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AtlasService/GetProviderByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtlasServiceServer).GetProviderByName(ctx, req.(*GetProviderByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AtlasService_ServiceDesc is the grpc.ServiceDesc for AtlasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AtlasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AtlasService",
	HandlerType: (*AtlasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _AtlasService_Deploy_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _AtlasService_ListNodes_Handler,
		},
		{
			MethodName: "NodeStatus",
			Handler:    _AtlasService_NodeStatus_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _AtlasService_ListProviders_Handler,
		},
		{
			MethodName: "GetProviderByName",
			Handler:    _AtlasService_GetProviderByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/structs.proto",
}
